/* CSS Reset*/
*
*::after
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /* tell all elements to Inherit this property from your parent (body) */ }

html {
  /* to make our life easier (default=16px) */
  font-size: 62.5%;
  /* 62.5/100 * 16px = 10px, We are using % so that root font size change if user changes his browser's default by zooming*/ }

/* Check typography file for other presetting */
body {
  box-sizing: border-box; }

@keyframes moveInLeft {
  /* Initial State*/
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  /* Final State*/
  100% {
    opacity: 1;
    transform: translate(0);
    /* Default/Original view */ } }

@keyframes moveInRight {
  /* Initial State*/
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  /* Final State*/
  100% {
    opacity: 1;
    transform: translate(0);
    /* Default/Original view */ } }

@keyframes moveInBottom {
  /* Initial State*/
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  /* Final State*/
  100% {
    opacity: 1;
    transform: translate(0);
    /* Default/Original view */ } }

/* Fonts for all the site, always fonts are placed in body*/
body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* standard weight*/
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  /* set text color*/
  padding: 3rem;
  /* applying padding to the whole site, to give us a nice white space */ }

.heading-primary {
  color: #ffffff;
  text-transform: uppercase;
  /* for shaky animation ??? */
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    /* to make it take the full width and add line break*/
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out; }
  .heading-primary--sub {
    display: block;
    /* to make it take the full width and add line break*/
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation-name: moveInRight;
    animation-duration: 1s;
    animation-timing-function: ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  display: inline-block;
  -webkit-background-clip: text;
  color: transparent;
  transition: all .2s;
  letter-spacing: 2px; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.5); }

.u-center-text {
  text-align: center; }

.u-margin-bottom-8 {
  margin-bottom: 8rem; }

.btn {
  /* when clicked*/ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    /* Used with inline elements with paddings, ht, wdth, ... */
    border-radius: 10rem;
    transition: all .2s;
    position: relative;
    font-size: 1.6rem; }
  .btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
    /*x-dir, y-dir, blur, color*/ }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
    /*x-dir, y-dir, blur, color*/ }
  .btn--white {
    background-color: #ffffff;
    color: #777; }
    .btn--white::after {
      background-color: #ffffff; }
  .btn::after {
    content: "";
    /* required even if empty*/
    display: inline-block;
    /* required & in our case inline-block like the btn we are trying to style*/
    /* after psuedo element is treated like a child, so its wdth, hgt, radius are the same as its parent(btn) */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* We marked the btn position as relative so that the psuedo element position itself abslotely relative to it*/
    /* Also we are making this to make it behind our btn */
    position: absolute;
    top: 0;
    left: 0;
    /* make it behind original btn element */
    z-index: -1;
    transition: all .4s; }
  .btn--animated {
    animation: moveInBottom .5s ease-out;
    animation-delay: .75s;
    animation-fill-mode: backwards;
    /* apply 0% animation at start */ }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }

.header {
  position: relative;
  height: 95vh;
  /* height of header element should be of 95% of the viewport height */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* linear grad shown on top, then the image*/
  background-size: cover;
  /* whatever the width of the view port/element, it will ty to fit the element to box width */
  background-position: top;
  /* background by default is placed at top-left */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* to clip or cut  part of the visible element */ }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    /* these pixels are calculated from parent element (header) which its position set to relative*/
    left: 4rem; }
  .header__logo {
    height: 3.5rem;
    /* width controlled by the browser since we defined height*/ }
  .header__text-box {
    /*Align text box div in center (vertically & horizontally)*/
    position: absolute;
    /* parent (header) is positioned relative*/
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    /* shift a div to the left by .5 of the element's width, also the same for the height*/
    /* So that any text inside text-box div is aligned center */
    text-align: center; }

.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 12rem) / 3); }
  .row .col-1-of-4 {
    width: calc((100% - 18rem) / 4); }
  .row .col-2-of-3 {
    width: calc((2 * (100% - 12rem) / 3) + 6rem); }
  .row .col-2-of-4 {
    width: calc((2 * (100% - 18rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc((3 * (100% - 18rem) / 4) + 2*6rem); }
